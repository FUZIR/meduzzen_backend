name: Run Django Tests
on:
  push:
    branches:
      - "**"
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      poetry-cache-path: ${{ steps.poetry-cache-path.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Cache Poetry dependencies
        id: poetry-cache-path
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        if: steps.poetry-cache-path.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Cache virtual environment
        if: steps.poetry-cache-path.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Show Poetry version
        run: poetry --version

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Use cached virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install dependencies
        if: steps.poetry-cache-path.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run ruff lint
        run: poetry run ruff check --fix

  tests:
    needs: [ setup, lint ]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Use cached virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install dependencies
        if: steps.poetry-cache-path.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run tests
        continue-on-error: true
        env:
          SECRET_KEY: ${{secrets.SECRET_KEY}}
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        run: poetry run pytest
  migrations:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Use cached virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install dependencies
        if: steps.poetry-cache-path.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Check migrations
        env:
          SECRET_KEY: ${{secrets.SECRET_KEY}}
        run: poetry run python -m core.manage makemigrations --check